{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGtrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGtrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OAEI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,yBAAKc,UAAU,2CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFHO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAd,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDdyBK,CAAa1B,GAAhCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAErB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,yCACZ,yBAAKJ,UAAU,aAGPH,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IACdD,UEbnBkB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,WAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAS9B,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ4C,EAAWpB,KAAI,SAACT,EAAU8B,GACtB,OAAO,kBAAC,EAAD,CACPH,IAAK3B,EACLA,SAAUA,U,MChBlC+B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.09ec24bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=QD4yPOQJNfiNV6n0JKUj9y6THziVUoBb`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__flipInX\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport {useFetchGifs} from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGtrid = ({ category }) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Loading...</p>}\n            <div className=\"card-grid\">\n\n                {\n                    images.map((img) => (\n                        <GifGridItem key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n\n            </div>\n        </>\n    )\n}\n","\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setstate({\n                data: imgs,\n                loading: false\n            })\n        })\n    }, [category])\n\n    return state;\n}","import React, { useState } from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport {GifGtrid} from './components/GifGtrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Naruto'])\n\n    // const handleAdd = () => {\n    //     setCategories(oldCategories => [...categories, 'HunterXHunter']);\n    //     setCategories([...categories, 'HunterXHunter']);\n    // }\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            \n            <ol>\n                {\n                    categories.map((category, index) => {\n                        return <GifGtrid \n                        key={category}\n                        category={category}/>\n                    })\n                }\n            </ol>\n\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}